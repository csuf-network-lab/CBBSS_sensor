/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SensorMsg'
 * message type.
 */

public class SensorMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 25;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 3;

    /** Create a new SensorMsg of size 25. */
    public SensorMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SensorMsg of the given data_length. */
    public SensorMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg with the given data_length
     * and base offset.
     */
    public SensorMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg using the given byte array
     * as backing store.
     */
    public SensorMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SensorMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SensorMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg embedded in the given message
     * at the given base offset.
     */
    public SensorMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg embedded in the given message
     * at the given base offset and length.
     */
    public SensorMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SensorMsg> \n";
      try {
        s += "  [sensorId=0x"+Long.toHexString(get_sensorId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [msgId=0x"+Long.toHexString(get_msgId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tag=0x"+Long.toHexString(get_tag())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [readings=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_readings(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [times=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_times(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sensorId
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sensorId' is signed (false).
     */
    public static boolean isSigned_sensorId() {
        return false;
    }

    /**
     * Return whether the field 'sensorId' is an array (false).
     */
    public static boolean isArray_sensorId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sensorId'
     */
    public static int offset_sensorId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sensorId'
     */
    public static int offsetBits_sensorId() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'sensorId'
     */
    public int get_sensorId() {
        return (int)getUIntBEElement(offsetBits_sensorId(), 16);
    }

    /**
     * Set the value of the field 'sensorId'
     */
    public void set_sensorId(int value) {
        setUIntBEElement(offsetBits_sensorId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sensorId'
     */
    public static int size_sensorId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sensorId'
     */
    public static int sizeBits_sensorId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msgId
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msgId' is signed (false).
     */
    public static boolean isSigned_msgId() {
        return false;
    }

    /**
     * Return whether the field 'msgId' is an array (false).
     */
    public static boolean isArray_msgId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msgId'
     */
    public static int offset_msgId() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msgId'
     */
    public static int offsetBits_msgId() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'msgId'
     */
    public int get_msgId() {
        return (int)getUIntBEElement(offsetBits_msgId(), 16);
    }

    /**
     * Set the value of the field 'msgId'
     */
    public void set_msgId(int value) {
        setUIntBEElement(offsetBits_msgId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'msgId'
     */
    public static int size_msgId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msgId'
     */
    public static int sizeBits_msgId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tag
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tag' is signed (false).
     */
    public static boolean isSigned_tag() {
        return false;
    }

    /**
     * Return whether the field 'tag' is an array (false).
     */
    public static boolean isArray_tag() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tag'
     */
    public static int offset_tag() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tag'
     */
    public static int offsetBits_tag() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'tag'
     */
    public short get_tag() {
        return (short)getUIntBEElement(offsetBits_tag(), 8);
    }

    /**
     * Set the value of the field 'tag'
     */
    public void set_tag(short value) {
        setUIntBEElement(offsetBits_tag(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'tag'
     */
    public static int size_tag() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tag'
     */
    public static int sizeBits_tag() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: readings
    //   Field type: int[], unsigned
    //   Offset (bits): 40
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'readings' is signed (false).
     */
    public static boolean isSigned_readings() {
        return false;
    }

    /**
     * Return whether the field 'readings' is an array (true).
     */
    public static boolean isArray_readings() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'readings'
     */
    public static int offset_readings(int index1) {
        int offset = 40;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'readings'
     */
    public static int offsetBits_readings(int index1) {
        int offset = 40;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'readings' as a int[]
     */
    public int[] get_readings() {
        int[] tmp = new int[5];
        for (int index0 = 0; index0 < numElements_readings(0); index0++) {
            tmp[index0] = getElement_readings(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'readings' from the given int[]
     */
    public void set_readings(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_readings(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'readings'
     */
    public int getElement_readings(int index1) {
        return (int)getUIntBEElement(offsetBits_readings(index1), 16);
    }

    /**
     * Set an element of the array 'readings'
     */
    public void setElement_readings(int index1, int value) {
        setUIntBEElement(offsetBits_readings(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'readings'
     */
    public static int totalSize_readings() {
        return (80 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'readings'
     */
    public static int totalSizeBits_readings() {
        return 80;
    }

    /**
     * Return the size, in bytes, of each element of the array 'readings'
     */
    public static int elementSize_readings() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'readings'
     */
    public static int elementSizeBits_readings() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'readings'
     */
    public static int numDimensions_readings() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'readings'
     */
    public static int numElements_readings() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'readings'
     * for the given dimension.
     */
    public static int numElements_readings(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: times
    //   Field type: int[], unsigned
    //   Offset (bits): 120
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'times' is signed (false).
     */
    public static boolean isSigned_times() {
        return false;
    }

    /**
     * Return whether the field 'times' is an array (true).
     */
    public static boolean isArray_times() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'times'
     */
    public static int offset_times(int index1) {
        int offset = 120;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'times'
     */
    public static int offsetBits_times(int index1) {
        int offset = 120;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'times' as a int[]
     */
    public int[] get_times() {
        int[] tmp = new int[5];
        for (int index0 = 0; index0 < numElements_times(0); index0++) {
            tmp[index0] = getElement_times(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'times' from the given int[]
     */
    public void set_times(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_times(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'times'
     */
    public int getElement_times(int index1) {
        return (int)getUIntBEElement(offsetBits_times(index1), 16);
    }

    /**
     * Set an element of the array 'times'
     */
    public void setElement_times(int index1, int value) {
        setUIntBEElement(offsetBits_times(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'times'
     */
    public static int totalSize_times() {
        return (80 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'times'
     */
    public static int totalSizeBits_times() {
        return 80;
    }

    /**
     * Return the size, in bytes, of each element of the array 'times'
     */
    public static int elementSize_times() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'times'
     */
    public static int elementSizeBits_times() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'times'
     */
    public static int numDimensions_times() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'times'
     */
    public static int numElements_times() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'times'
     * for the given dimension.
     */
    public static int numElements_times(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
